---
// Astro component
import ProductCard from "./05-ProductCard.astro";

// Define interfaces for our data structures
interface Product {
    category: string;
    subcategory: string | null;
    image: string;
    name: string;
    description: string;
    discount?: number;
    isNew?: boolean;
}

// You might want to fetch this data from an API or database
const products: Product[] = [
    {
        category: "motocicletas",
        subcategory: "urbana",
        image: "/assets/images/product_1.jpg",
        name: "MT-03 urbana",
        description: "Potencia y agilidad en un diseño compacto.",
        discount: 1000,
    },
    {
        category: "motocicletas",
        subcategory: "deportiva",
        image: "/assets/images/product_1.jpg",
        name: "MT-03 deportiva",
        description: "Potencia y agilidad en un diseño compacto.",
        discount: 1000,
    },
    {
        category: "motocicletas",
        subcategory: "urbana",
        image: "/assets/images/product_1.jpg",
        name: "MT-03 urbana",
        description: "Potencia y agilidad en un diseño compacto.",
        discount: 1000,
    },
    {
        category: "wave",
        subcategory: null,
        image: "/assets/images/product_2.jpg",
        name: "FX SVHO",
        description: "Rendimiento superior en el agua.",
        isNew: true,
    },
    {
        category: "wave",
        subcategory: null,
        image: "/assets/images/product_2.jpg",
        name: "FX SVHO",
        description: "Rendimiento superior en el agua.",
        isNew: true,
        discount: null,
    },
    {
        category: "wave",
        subcategory: null,
        image: "/assets/images/product_2.jpg",
        name: "FX SVHO",
        description: "Rendimiento superior en el agua.",
        isNew: true,
        discount: 1000,
    },
    {
        category: "wave",
        subcategory: null,
        image: "/assets/images/product_2.jpg",
        name: "FX SVHO",
        description: "Rendimiento superior en el agua.",
        isNew: true,
    },
    {
        category: "motocicletas",
        subcategory: null,
        image: "/assets/images/product_1.jpg",
        name: "MT-03",
        description: "Potencia y agilidad en un diseño compacto.",
        discount: 1000,
    },
    {
        category: "motocicletas",
        subcategory: "urbana",
        image: "/assets/images/product_1.jpg",
        name: "MT-03",
        description: "Potencia y agilidad en un diseño compacto.",
        discount: 1000,
    },
    {
        category: "motocicletas",
        subcategory: "deportiva",
        image: "/assets/images/product_1.jpg",
        name: "MT-03",
        description: "Potencia y agilidad en un diseño compacto.",
        discount: 1000,
    },
    {
        category: "wave",
        subcategory: null,
        image: "/assets/images/product_2.jpg",
        name: "FX SVHO",
        description: "Rendimiento superior en el agua.",
        isNew: true,
    },
    {
        category: "wave",
        subcategory: "urbana",
        image: "/assets/images/product_2.jpg",
        name: "FX SVHO",
        description: "Rendimiento superior en el agua.",
        isNew: true,
        discount: null,
    },
    {
        category: "wave",
        subcategory: null,
        image: "/assets/images/product_2.jpg",
        name: "FX SVHO",
        description: "Rendimiento superior en el agua.",
        isNew: true,
        discount: 1000,
    },
    {
        category: "wave",
        subcategory: null,
        image: "/assets/images/product_2.jpg",
        name: "FX SVHO",
        description: "Rendimiento superior en el agua.",
        isNew: true,
    },
    // Add more products here...
];

const categories = [
    { id: "motocicletas", name: "MOTOCICLETAS" },
    { id: "wave", name: "WAVE RUNNERS" },
    { id: "atv", name: "ATVS Y SIDE BY SIDE" },
    { id: "motores", name: "MOTORES" },
    { id: "bombas", name: "BOMBAS DE AGUA" },
    { id: "generadores", name: "GENERADORES" },
];

// Get unique subcategories for each category
const subcategories = categories.reduce(
    (acc, category) => {
        acc[category.id] = [
            ...new Set(
                products
                    .filter((product) => product.category === category.id)
                    .map((product) => product.subcategory)
                    .filter((subcategory) => subcategory !== null),
            ),
        ];
        return acc;
    },
    {} as Record<string, string[]>,
);
---

<div class="new_arrivals bg-white py-8 sm:py-16" id="new_arrivals">
    <div class="container mx-auto px-4">
        <span class="relative flex justify-center mb-4">
            <div
                class="absolute inset-x-0 top-1/2 h-px -translate-y-1/2 bg-transparent bg-gradient-to-r from-transparent via-gray-500 to-transparent opacity-75"
            >
            </div>
            <span class="relative z-10 bg-white px-6">
                <h2 class="text-2xl sm:text-3xl font-bold text-gray-800">
                    EXPLORA NUESTRA TIENDA
                </h2>
            </span>
        </span>
        <div class="mb-6 sm:mb-8 relative">
            <div class="overflow-x-auto">
                <ul
                    class="flex mx-1 my-1 flex-nowrap justify-start sm:justify-center gap-2 sm:gap-4 pb-2 sm:pb-0"
                    id="category-buttons"
                >
                    {
                        categories.map((category, index) => (
                            <li class="relative">
                                <button
                                    class:list={[
                                        "category-button",
                                        { active: index === 0 },
                                    ]}
                                    data-category={category.id}
                                >
                                    {category.name}
                                    {subcategories[category.id]?.length > 0 && (
                                        <span class="ml-2 dropdown-toggle">
                                            <svg
                                                class="w-4 h-4 inline-block"
                                                xmlns="http://www.w3.org/2000/svg"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor"
                                            >
                                                <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    stroke-width="2"
                                                    d="M19 9l-7 7-7-7"
                                                />
                                            </svg>
                                        </span>
                                    )}
                                </button>
                            </li>
                        ))
                    }
                </ul>
            </div>
            <div id="dropdown-container" class="absolute left-0 right-0">
                {
                    categories.map(
                        (category) =>
                            subcategories[category.id] &&
                            subcategories[category.id].length > 0 && (
                                <ul
                                    class="subcategory-dropdown hidden rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
                                    data-category={category.id}
                                >
                                    <li>
                                        <button
                                            class="subcategory-button block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                            data-category={category.id}
                                            data-subcategory="all"
                                        >
                                            TODAS
                                        </button>
                                    </li>
                                    {subcategories[category.id].map(
                                        (subcategory) => (
                                            <li>
                                                <button
                                                    class="subcategory-button block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                                    data-category={category.id}
                                                    data-subcategory={
                                                        subcategory
                                                    }
                                                >
                                                    {subcategory.toUpperCase()}
                                                </button>
                                            </li>
                                        ),
                                    )}
                                </ul>
                            ),
                    )
                }
            </div>
        </div>
        <div
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 sm:gap-0"
            id="product-grid"
        >
            {products.map((product) => <ProductCard product={product} />)}
        </div>
    </div>
</div>

<style>
    .category-button {
        @apply px-3 py-1 sm:px-4 sm:py-2 text-xs sm:text-sm font-semibold text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-300;
        white-space: nowrap;
    }
    .category-button.active {
        @apply bg-red-600 text-white border-red-600 hover:bg-red-700;
    }
    .subcategory-dropdown {
        @apply py-1 rounded-md bg-white;
        position: absolute;
        top: 100%;
        left: 0;
        z-index: 50;
        min-width: 150px;
    }
    #category-buttons {
        position: relative;
        z-index: 40;
    }
    #dropdown-container {
        z-index: 50;
    }
</style>
<script>
    const categoryButtons =
        document.querySelectorAll<HTMLButtonElement>(".category-button");
    const subcategoryDropdowns = document.querySelectorAll<HTMLUListElement>(
        ".subcategory-dropdown",
    );
    const productItems =
        document.querySelectorAll<HTMLDivElement>(".product-item");
    const dropdownContainer = document.getElementById("dropdown-container");
    const dropdownToggles =
        document.querySelectorAll<HTMLSpanElement>(".dropdown-toggle");

    function filterProducts(
        category: string,
        subcategory: string | null = null,
    ) {
        productItems.forEach((item) => {
            const itemCategory = item.getAttribute("data-category");
            const itemSubcategory = item.getAttribute("data-subcategory");

            if (
                category === itemCategory &&
                (subcategory === null ||
                    subcategory === "all" ||
                    subcategory === itemSubcategory)
            ) {
                item.style.display = "block";
            } else {
                item.style.display = "none";
            }
        });
    }

    function positionDropdown(
        button: HTMLButtonElement,
        dropdown: HTMLUListElement,
    ) {
        const buttonRect = button.getBoundingClientRect();
        const containerRect = dropdownContainer!.getBoundingClientRect();

        dropdown.style.left = `${buttonRect.left - containerRect.left}px`;
        dropdown.style.minWidth = `${buttonRect.width}px`;
    }

    categoryButtons.forEach((button, index) => {
        button.addEventListener("click", (event) => {
            if (!(event.target as HTMLElement).closest(".dropdown-toggle")) {
                const category = button.getAttribute("data-category");
                if (category) {
                    filterProducts(category);
                    categoryButtons.forEach((btn) =>
                        btn.classList.remove("active"),
                    );
                    button.classList.add("active");

                    // Ocultar todos los dropdowns
                    subcategoryDropdowns.forEach((drop) =>
                        drop.classList.add("hidden"),
                    );
                }
            }
        });

        // Activar el primer botón (Motocicletas) al cargar la página
        if (index === 0) {
            const category = button.getAttribute("data-category");
            if (category) {
                filterProducts(category);
            }
        }
    });

    dropdownToggles.forEach((toggle) => {
        toggle.addEventListener("click", (event) => {
            event.stopPropagation();
            const button = toggle.closest(
                ".category-button",
            ) as HTMLButtonElement;
            const category = button.getAttribute("data-category");
            if (category) {
                // Ocultar todos los dropdowns
                subcategoryDropdowns.forEach((drop) =>
                    drop.classList.add("hidden"),
                );

                // Mostrar y posicionar el dropdown correspondiente
                const dropdown = document.querySelector<HTMLUListElement>(
                    `.subcategory-dropdown[data-category="${category}"]`,
                );
                if (dropdown) {
                    dropdown.classList.toggle("hidden");
                    positionDropdown(button, dropdown);
                }
            }
        });
    });

    document
        .querySelectorAll<HTMLButtonElement>(".subcategory-button")
        .forEach((button) => {
            button.addEventListener("click", () => {
                const category = button.getAttribute("data-category");
                const subcategory = button.getAttribute("data-subcategory");
                if (category && subcategory) {
                    filterProducts(category, subcategory);
                }
                // Ocultar dropdown después de la selección
                button
                    .closest(".subcategory-dropdown")
                    ?.classList.add("hidden");
            });
        });

    // Cerrar dropdowns al hacer clic fuera
    document.addEventListener("click", (event) => {
        if (
            !(event.target as HTMLElement).closest(".category-button") &&
            !(event.target as HTMLElement).closest(".subcategory-dropdown")
        ) {
            subcategoryDropdowns.forEach((dropdown) => {
                dropdown.classList.add("hidden");
            });
        }
    });

    // Reposicionar dropdowns al redimensionar la ventana
    window.addEventListener("resize", () => {
        const activeButton = document.querySelector<HTMLButtonElement>(
            ".category-button.active",
        );
        const activeDropdown = document.querySelector<HTMLUListElement>(
            ".subcategory-dropdown:not(.hidden)",
        );
        if (activeButton && activeDropdown) {
            positionDropdown(activeButton, activeDropdown);
        }
    });

    // Filtrar motocicletas al cargar la página
    filterProducts("motocicletas");
</script>
