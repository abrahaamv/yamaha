---
// Astro component
import ProductCard from "./05-ProductCard.astro";
import productsData from "../data/products.js";

// Define interfaces for our data structures
interface Product {
    category: string;
    subcategory: string | null;
    image: string;
    name: string;
    description: string;
    discount?: number;
    isNew?: boolean;
}

// Transform the imported data into a flat array of individual products
const products: Product[] = productsData.flatMap((category) =>
    Object.values(category.subcategories).flatMap((subcategoryProducts) =>
        subcategoryProducts.map((product) => ({
            ...product,
            category: category.category,
            subcategory: product.subcategory || null,
            description: product.description || "",
        })),
    ),
);

// Extract unique categories and subcategories
const categories = [
    ...new Set(products.map((product) => product.category)),
].map((category) => ({
    id: category,
    name: category.toUpperCase(),
}));

// Get unique subcategories for each category
const subcategories = categories.reduce(
    (acc, category) => {
        acc[category.id] = [
            ...new Set(
                products
                    .filter((product) => product.category === category.id)
                    .map((product) => product.subcategory)
                    .filter((subcategory) => subcategory !== null),
            ),
        ];
        return acc;
    },
    {} as Record<string, string[]>,
);
---

<section id="productos">
    <div class="bg-white py-8 sm:py-16" id="new_arrivals">
        <div class="container mx-auto px-4">
            <span class="relative flex justify-center mb-4">
                <div
                    class="absolute inset-x-0 top-1/2 h-px -translate-y-1/2 bg-transparent bg-gradient-to-r from-transparent via-gray-500 to-transparent opacity-75"
                >
                </div>
                <span class="relative z-10 bg-white px-6">
                    <h2 class="text-2xl sm:text-3xl font-bold text-gray-800">
                        EXPLORA NUESTRA TIENDA
                    </h2>
                </span>
            </span>
            <div class="mb-6 sm:mb-8 relative">
                <div class="overflow-x-auto">
                    <ul
                        class="flex mx-1 my-1 flex-nowrap justify-start gap-2 sm:gap-4 pb-2 sm:pb-0"
                        id="category-buttons"
                    >
                        {
                            categories.map((category, index) => (
                                <li class="relative">
                                    <button
                                        class:list={[
                                            "category-button",
                                            { active: index === 0 },
                                        ]}
                                        data-category={category.id}
                                    >
                                        {category.name}
                                        {subcategories[category.id]?.length >
                                            0 && (
                                            <span class="ml-2 dropdown-toggle">
                                                <svg
                                                    class="w-4 h-4 inline-block"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    stroke="currentColor"
                                                >
                                                    <path
                                                        stroke-linecap="round"
                                                        stroke-linejoin="round"
                                                        stroke-width="2"
                                                        d="M19 9l-7 7-7-7"
                                                    />
                                                </svg>
                                            </span>
                                        )}
                                    </button>
                                </li>
                            ))
                        }
                    </ul>
                </div>
                <div id="dropdown-container" class="absolute left-0 right-0">
                    {
                        categories.map(
                            (category) =>
                                subcategories[category.id] &&
                                subcategories[category.id].length > 0 && (
                                    <ul
                                        class="subcategory-dropdown hidden rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
                                        data-category={category.id}
                                    >
                                        <li>
                                            <button
                                                class="subcategory-button block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                                data-category={category.id}
                                                data-subcategory="all"
                                            >
                                                TODAS
                                            </button>
                                        </li>
                                        {subcategories[category.id].map(
                                            (subcategory) => (
                                                <li>
                                                    <button
                                                        class="subcategory-button block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                                        data-category={
                                                            category.id
                                                        }
                                                        data-subcategory={
                                                            subcategory
                                                        }
                                                    >
                                                        {subcategory.toUpperCase()}
                                                    </button>
                                                </li>
                                            ),
                                        )}
                                    </ul>
                                ),
                        )
                    }
                </div>
            </div>
            <div
                class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 sm:gap-0"
                id="product-grid"
            >
                {products.map((product) => <ProductCard product={product} />)}
            </div>
        </div>
    </div>
</section>

<style>
    .category-button {
        @apply px-3 py-1 sm:px-4 sm:py-2 text-xs sm:text-sm font-semibold text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-300;
        white-space: nowrap;
    }
    .category-button.active {
        @apply bg-red-600 text-white border-red-600 hover:bg-red-700;
    }
    .subcategory-dropdown {
        @apply py-1 rounded-md bg-white;
        position: absolute;
        top: 100%;
        left: 0;
        z-index: 50;
        min-width: 150px;
    }
    #category-buttons {
        position: relative;
        z-index: 40;
    }
    #dropdown-container {
        z-index: 50;
    }
</style>
<script>
    const categoryButtons =
        document.querySelectorAll<HTMLButtonElement>(".category-button");
    const subcategoryDropdowns = document.querySelectorAll<HTMLUListElement>(
        ".subcategory-dropdown",
    );
    const productItems =
        document.querySelectorAll<HTMLDivElement>(".product-item");
    const dropdownContainer = document.getElementById("dropdown-container");
    const dropdownToggles =
        document.querySelectorAll<HTMLSpanElement>(".dropdown-toggle");

    // Get list of valid categories from category buttons
    const validCategories = Array.from(categoryButtons).map((btn) =>
        btn.getAttribute("data-category"),
    );

    function filterProducts(
        category: string,
        subcategory: string | null = null,
    ) {
        productItems.forEach((item) => {
            const itemCategory = item.getAttribute("data-category");
            const itemSubcategory = item.getAttribute("data-subcategory");

            if (
                category === itemCategory &&
                (subcategory === null ||
                    subcategory === "all" ||
                    subcategory === itemSubcategory)
            ) {
                item.style.display = "block";
            } else {
                item.style.display = "none";
            }
        });
    }

    function setActiveButton(category: string) {
        categoryButtons.forEach((btn) => {
            if (btn.getAttribute("data-category") === category) {
                btn.classList.add("active");
            } else {
                btn.classList.remove("active");
            }
        });
    }

    function positionDropdown(
        button: HTMLButtonElement,
        dropdown: HTMLUListElement,
    ) {
        const buttonRect = button.getBoundingClientRect();
        const containerRect = dropdownContainer!.getBoundingClientRect();

        dropdown.style.left = `${buttonRect.left - containerRect.left}px`;
        dropdown.style.minWidth = `${buttonRect.width}px`;
    }

    categoryButtons.forEach((button) => {
        button.addEventListener("click", (event) => {
            if (!(event.target as HTMLElement).closest(".dropdown-toggle")) {
                const category = button.getAttribute("data-category");
                if (category) {
                    filterProducts(category);
                    setActiveButton(category);
                    subcategoryDropdowns.forEach((drop) =>
                        drop.classList.add("hidden"),
                    );
                }
            }
        });
    });

    dropdownToggles.forEach((toggle) => {
        toggle.addEventListener("click", (event) => {
            event.stopPropagation();
            const button = toggle.closest(
                ".category-button",
            ) as HTMLButtonElement;
            const category = button.getAttribute("data-category");
            if (category) {
                subcategoryDropdowns.forEach((drop) =>
                    drop.classList.add("hidden"),
                );
                const dropdown = document.querySelector<HTMLUListElement>(
                    `.subcategory-dropdown[data-category="${category}"]`,
                );
                if (dropdown) {
                    dropdown.classList.toggle("hidden");
                    positionDropdown(button, dropdown);
                }
            }
        });
    });

    document
        .querySelectorAll<HTMLButtonElement>(".subcategory-button")
        .forEach((button) => {
            button.addEventListener("click", () => {
                const category = button.getAttribute("data-category");
                const subcategory = button.getAttribute("data-subcategory");
                if (category && subcategory) {
                    filterProducts(category, subcategory);
                    setActiveButton(category);
                }
                button
                    .closest(".subcategory-dropdown")
                    ?.classList.add("hidden");
            });
        });

    document.addEventListener("click", (event) => {
        if (
            !(event.target as HTMLElement).closest(".category-button") &&
            !(event.target as HTMLElement).closest(".subcategory-dropdown")
        ) {
            subcategoryDropdowns.forEach((dropdown) => {
                dropdown.classList.add("hidden");
            });
        }
    });

    window.addEventListener("resize", () => {
        const activeButton = document.querySelector<HTMLButtonElement>(
            ".category-button.active",
        );
        const activeDropdown = document.querySelector<HTMLUListElement>(
            ".subcategory-dropdown:not(.hidden)",
        );
        if (activeButton && activeDropdown) {
            positionDropdown(activeButton, activeDropdown);
        }
    });

    // Function to parse the URL hash and set the category accordingly
    function parseHash() {
        const hash = window.location.hash;
        if (hash) {
            const hashValue = hash.substring(1); // Remove the '#' character
            const [section, categoryEncoded] = hashValue.split(":");
            const category = decodeURIComponent(categoryEncoded || "");
            if (section === "productos") {
                // Scroll to the 'productos' section
                const productosSection = document.getElementById("productos");
                if (productosSection) {
                    productosSection.scrollIntoView({ behavior: "smooth" });
                }

                if (category && validCategories.includes(category)) {
                    filterProducts(category);
                    setActiveButton(category);
                } else {
                    // If category is invalid or not specified, default to 'motocicletas'
                    filterProducts("motocicletas");
                    setActiveButton("motocicletas");
                }
            } else {
                // Default category if the section is not 'productos'
                filterProducts("motocicletas");
                setActiveButton("motocicletas");
            }
        } else {
            // No hash, default category
            filterProducts("motocicletas");
            setActiveButton("motocicletas");
        }
    }

    // Initial call to set up the products based on the URL hash
    parseHash();

    // Listen for changes in the URL hash
    window.addEventListener("hashchange", parseHash);
</script>
